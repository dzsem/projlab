' Test-casek:
' - Tecton Grow Thread Success: t1 és t2 szomszédos; t1-en van mt
' - Tecton Grow Thread Fail: t1 és t3 nem szomszédos; t1-en van mt
' - Tecton Grow Body Success: t1-en van mt; t1-en van s1, s2 és s3; t1-en nincs mb
' - Tecton Grow Body Thread Fail: t2-n nincs mt; t2-n van s1, s2 és s3; t2-n nincs mb
' - Tecton Grow Body Spore Fail: t3-on van mt; t3-on nincs spóra; t3-on nincs mb
' - Tecton Grow Body Body Fail: t4-en van mt; t4-en van s1, s2, s3; t4-en van mb

@startuml communicationTecton3

title Tecton Grow Thread Success,\nTecton Grow Thread Fail,\nTecton Grow Body Success,\nTecton Grow Body Thread Fail,\nTecton Grow Body Spore Fail,\nTecton Grow Body Body Fail

actor "Tester" as ts
' t1 szomszédos t2-vel, de t3-al nem, így több test-casere is jó lesz a diagram 
participant "t1: Tecton" as t1 
participant "t2: Tecton" as t2
participant "t3: Tecton" as t3
participant "t4: Tecton" as t4
participant "mt: MushroomThread" as mt
participant "mb: MushroomBody" as mb
participant "s1: Spore" as s1
participant "s2: Spore" as s2
participant "s3: Spore" as s3

activate ts

' ------------------------------------------
' t1: szomszédos t2-vel
ts -> t1: 1.1 -> Initialize([t2])
activate t1

t1 -> t1: 1.1.1 registerNeighbour(t2)

ts <-- t1
deactivate t1

' ------------------------------------------
' t2: szomszédos t1-el
ts -> t2: 1.2 -> Initialize([t1])
activate t2

t2 -> t2: 1.1.1 registerNeighbour(t1)

ts <-- t2
deactivate t2

' ------------------------------------------
' t3
ts -> t3: 1.3 -> Initialize()
activate t3
ts <-- t3
deactivate t3

' ------------------------------------------
' t4
ts -> t4: 1.4 -> Initialize()
activate t4
ts <-- t4
deactivate t4

' ------------------------------------------
' thread: t1, t3, t4-en nő
ts -> mt: 2.1 -> Initialize([t1, t3, t4])
activate mt

mt -> t1: 2.1.1 <- addConnection(mt)
activate t1
mt <-- t1
deactivate t1

mt -> t3: 2.1.2 <- addConnection(mt)
activate t3
mt <-- t3
deactivate t3

mt -> t4: 2.1.3 <- addConnection(mt)
activate t4
mt <-- t4
deactivate t4

ts <-- mt
deactivate mt

' ------------------------------------------
' body: t4-en nő
ts -> mb: 3.1 -> Initialize([t4])
activate mb

mb -> t4: 3.1.1 <- setBody(mb)
activate t4
mb <-- t4
deactivate t4

ts <-- mb
deactivate mb

' ------------------------------------------
' minden spóra t1, t2, t3-on van
' s1
ts -> s1: 4.1 -> Initialize([t1, t2, t3])
activate s1

s1 -> t1: 4.1.1 <- addSpore(s1)
activate t1
s1 <-- t1
deactivate t1

s1 -> t2: 4.1.2 <- addSpore(s1)
activate t2
s1 <-- t2
deactivate t2

s1 -> t4: 4.1.3 <- addSpore(s1)
activate t4
s1 <-- t4
deactivate t4

ts <-- s1
deactivate s1

' ------------------------------------------
' s2
ts -> s2: 4.2 -> Initialize([t1, t2, t3])
activate s2

s2 -> t1: 4.2.1 <- addSpore(s2)
activate t1
s2 <-- t1
deactivate t1

s2 -> t2: 4.2.2 <- addSpore(s2)
activate t2
s2 <-- t2
deactivate t2

s2 -> t4: 4.2.3 <- addSpore(s2)
activate t4
s2 <-- t4
deactivate t4

ts <-- s2
deactivate s2

' ------------------------------------------
' s3
ts -> s3: 4.3 -> Initialize([t1, t2, t3])
activate s3

s3 -> t1: 4.3.1 <- addSpore(s3)
activate t1
s3 <-- t1
deactivate t1

s3 -> t2: 4.3.2 <- addSpore(s3)
activate t2
s3 <-- t2
deactivate t2

s3 -> t4: 4.3.3 <- addSpore(s3)
activate t4
s3 <-- t4
deactivate t4

ts <-- s3
deactivate s3

deactivate ts

@enduml