@startuml Insect.getActions

participant "i: Insect" as insect
participant "i.tecton: Tecton" as tecton
participant "MoveInsectAction" as mi_action
participant "CutThreadAction" as ct_action
participant "EatSporeAction" as es_action
collections "result: Action[]" as res

-> insect: Insect.getActions()
activate insect
note right: rovar lehetséges akcióinak inicializálása

insect -> res: Instantiate()
activate res
note right: kimeneti akció lista

insect <-- res
deactivate res

insect -> tecton: getThreads()
activate tecton

insect <-- tecton: MushroomThread[]
deactivate tecton

loop for each thread

	insect -> mi_action: Instantiate(i, thread)
	activate mi_action

	insect <-- mi_action
	deactivate mi_action


	insect -> ct_action: Instantiate(i, thread)
	activate ct_action

	insect <-- ct_action
	deactivate ct_action

	insect -> res: add(moveInsectAction)
	activate res
	insect <-- res
	deactivate res

	insect -> res: add(cutThreadAction)
	activate res
	insect <-- res
	deactivate res

end

insect -> tecton: getSpores()
activate tecton

insect <-- tecton: spores
deactivate tecton

opt spores is not empty
	insect -> es_action: Instantiate(i)
	activate es_action

	insect <-- es_action
	deactivate es_action

	insect -> res: add(eatSporeAction)
	activate res
	insect <-- res
	deactivate res
end

<-- insect: result
deactivate insect

@enduml