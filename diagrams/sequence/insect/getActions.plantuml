@startuml Insect.getActions

participant "i: Insect" as insect
participant "i.tecton: Tecton" as tecton
participant "MoveInsectAction" as mi_action
participant "CutThreadAction" as ct_action
participant "EatSporeAction" as es_action

-> insect: Insect.getActions()
activate insect

insect -> tecton: getThreads()
deactivate insect
activate tecton

insect <-- tecton: MushroomThread[]
deactivate tecton
activate insect

loop for each thread

	insect -> mi_action: Instantiate(i, thread)
	deactivate insect
	activate mi_action

	insect <-- mi_action
	deactivate mi_action
	activate insect

	insect -> ct_action: Instantiate(i, thread)
	deactivate insect
	activate ct_action

	insect <-- ct_action
	deactivate ct_action
	activate insect

end

insect -> tecton: getSpores()
deactivate insect
activate tecton

insect <-- tecton: MushroomSpore[]
deactivate tecton
activate insect

opt tecton has spores
	insect -> es_action: Instantiate(i, i.tecton)
	deactivate insect
	activate es_action

	insect <-- es_action
	deactivate es_action
	activate insect
end

<-- insect: Action[]
deactivate insect

@enduml