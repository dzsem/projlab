@startuml DistributeSpore
title MushroomBody.distributeSpores

participant "dsa: DistibuteSporeAction" as dsa
participant "body: MushroomBody" as body
participant "body.tecton: Tecton" as tecton
participant "tectonToSpore: Tecton" as tectonToSpore
participant "parent: Mushroom" as parent
collections "tectonsToSpore: Tecton[0..*]" as tectons 

dsa -> body : distributeSpores()
activate dsa
activate body

body -> tecton : getNeighbours()

activate tecton
tecton --> body : neighbours: Tecton[0..*]
deactivate tecton

body --> tectons: Instantiate
note right: belso lista
activate tectons
deactivate tectons

    opt age >= normalAge
        body -> tectons: addAll(neighbours);
        activate tectons
        tectons --> body
        deactivate tectons
    end 

    opt age >= advancedAge
        loop for each neighbour in neighbours
            opt !tectonsToSpore.contains(neighbour)
                body -> tectons: tectonsToSpore.add(neighbour)
                activate tectons
                tectons --> body
                deactivate tectons
            end
        end
    end

    body -> tectons: add(body.tecton)
    activate tectons
    tectons --> body
    deactivate tectons

    loop for each tectonToSpore in tectonsToSpore
        body -> tectonToSpore : addSpore(spore: Spore)
        activate tectonToSpore
        tectonToSpore --> body 
        deactivate tectonToSpore

    end

    opt body.remainingSpore == 0
        body -> parent : removeBody(body)
        activate parent
        parent --> body
        deactivate parent
        body -> tecton : removeBody(body)
        activate tecton
        tecton --> body
        deactivate tecton
    end

dsa <-- body
deactivate body
deactivate dsa

@enduml