@startuml moveToTectonInitFlow

title MoveToTecton teszteseteinek inicializációi

actor Tesztelő as tester

activate tester

create participant "t1: Tecton" as t1
tester -> t1: 1.1 → Initialize()
activate t1

tester <-- t1
deactivate t1

create participant "t2: Tecton" as t2
tester -> t2: 1.2 → Initialize()
activate t2

tester <-- t2
deactivate t2

create participant "t3: Tecton" as t3
tester -> t3: 1.3 → Initialize()
activate t3

tester <-- t3
deactivate t3

create participant "t4: Tecton" as t4
tester -> t4: 1.4 → Initialize()
activate t4

tester <-- t4
deactivate t4

tester -> t1: 2 → addNeighbour([t2, t3])
activate t1

	t1 -> t2: 2.1 → registerNeighbour(t1)
	activate t2

	t1 <-- t2
	deactivate t2

	t1 -> t3: 2.2 → registerNeighbour(t1)
	activate t3

	t1 <-- t3
	deactivate t3

tester <-- t1
deactivate t1


tester -> t4: 3 → addNeighbour([t3])
activate t4

	t4 -> t3: 3.1 → registerNeighbour(t4)
	activate t3

	t4 <-- t3
	deactivate t3

tester <-- t4
deactivate t4

create participant "ins: Insect" as ins
tester -> ins: 4.1 → Initialize()
activate ins

tester <-- ins
deactivate ins

tester -> ins: 4.2 → setTecton(t1)
activate ins

	ins -> t1: 4.2.1 → registerInsect(t1)
	activate t1

	ins <-- t1
	deactivate t1

tester <-- ins
deactivate ins

create participant "mb: MushroomBody" as mb
tester -> mb: 5 → Initialize(t1)
activate mb

	mb -> t1: setBody(mb)
	activate t1

	mb <-- t1
	deactivate t1

tester <-- mb
deactivate mb

tester -> mb: 6 → createConnection(t3)
activate mb
	create participant "mt1: MushroomThread" as mt1
	mb -> mt1: 6.1 → Initialize(???)
	activate mt1

	mb <-- mt1
	deactivate mt1
tester <-- mb
deactivate mb

tester -> mt1: 7 → createConnection(t4)
activate mt1
	create participant "mt2: MushroomThread" as mt2
	mt1 -> mt2: 7.1 → Initialize(???)
	activate mt2

	mt1 <-- mt2
	deactivate mt2
tester <-- mt1
deactivate mt1

deactivate tester

@enduml