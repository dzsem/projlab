@startuml Thread Is Traversible Success Init
title Thread Is Connecting Tecton Success Init

actor "Tester" as tester

participant "mt1.tecton: Tecton" as t1
participant "mt2.tecton: Tecton" as t2
participant "mt1: MushroomThread" as mt1
participant "mt2: MushroomThread" as mt2

collections "mt1.connectedThreads[0..*]" as ct1
collections "mt2.connectedThreads[0..*]" as ct2

activate tester

'Init tectons
tester -> t1: Initialize()
activate t1
t1 --> tester
deactivate t1

tester -> t2: Initialize()
activate t2
t2 --> tester
deactivate t2

'Add neighbours
tester -> t1: addNeighbour([mt2.tecton])
activate t1
t1 -> t2: registerNeighbour(mt1.tecton)
activate t2
t2 --> t1
deactivate t2
t1 -> tester
deactivate t1

'Add threads
tester -> mt1: Initialize(mt1.tecton)
activate mt1
mt1 -> t1: addConnection(mt1)
activate t1
t1 --> mt1
deactivate t1
mt1 --> tester 
deactivate mt1

tester -> mt1: createConnection(mt2.tecton)
activate mt1

mt1 -> mt2: Initialize(mt2.tecton)
activate mt2
mt2 -> t2: addConnection(mt2)
activate t2
t2 --> mt2
deactivate t2
mt2 --> mt1
deactivate mt2

mt1 -> ct1: add(mt2)
activate ct1
ct1 --> mt1
deactivate ct1


mt1 -> ct2: add(mt1)
activate ct2
ct2 -> mt1
deactivate ct2

mt1 --> tester
deactivate mt1

'Set Grows
tester -> mt1: setGrowState(GrowState.GROWN)
activate mt1
mt1 --> tester
deactivate mt1

tester -> mt2: setGrowState(GrowState.GROWN)
activate mt2
mt2 --> tester
deactivate mt2

@enduml