@startuml Advanced Mushroom Body Distribute Spores

title Advanced Mushroom Body Distribute Spores

actor "Tester" as tester

participant "Skeleton" as skeleton

participant "advancedBody: MushroomBody" as amb

participant "t1: Tecton" as t1

activate tester

collections "tectonsToSpore: Tecton[0..*]" as tectons
collections "neighbours: Tecton [0..*]"
participant "t2: Tecton" as t2
participant "t3: Tecton" as t3

tester -> skeleton: testAdvancedMushroomDistributeSpores()
activate skeleton

skeleton -> amb: distributeSpores() 
activate amb

' COPY BEGIN

amb -> t1 : getNeighbours()

activate t1
t1 --> amb : neighbours: Tecton[0..*]
note right: neighbours == {t2} 
deactivate t1

amb --> tectons: Instantiate
note right: belso lista
activate tectons
deactivate tectons
    
    amb -> tectons: add(advancedMushroomBody.tecton) 
    note right: itt advancedMushroomBody.tecton == t1
    activate tectons
    tectons --> amb
    deactivate tectons
    
    amb -> tectons: addAll(neighbours);
    activate tectons
    tectons --> amb
    deactivate tectons

    ' Could not use
    ' opt body.age >= advancedAge
    '     loop for each neighbour in neighbours
    '         opt !tectonsToSpore.contains(neighbour)
    '             body -> tectons: tectonsToSpore.add(neighbourOfNeighbour)
    '             activate tectons
    '             tectons --> body
    '             deactivate tectons
    '         end
    '     end
    ' end

    amb -> tectons: add(t3)
    activate tectons
    tectons --> amb
    deactivate tectons

    loop for each tectonToSpore in tectonsToSpore
        amb -> tectons : addSpore(spore: Spore)
        activate tectons
        tectons --> amb 
        deactivate tectons
    end

    ' Not part of the test-case
    ' opt body.remainingSpore == 0
    '     body -> tecton : removeBody(body)
    '     activate tecton
    '     tecton --> body
    '     deactivate tecton
    ' end
' COPY END

amb --> skeleton
deactivate amb

skeleton --> tester
deactivate skeleton

@enduml